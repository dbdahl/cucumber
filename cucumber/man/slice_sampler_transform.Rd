% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/slice_sampler.R
\name{slice_sampler_transform}
\alias{slice_sampler_transform}
\title{Transform Slice Sampler}
\usage{
slice_sampler_transform(x, target, pseudo_log_pdf, pseudo_inv_cdf, log = TRUE)
}
\arguments{
\item{x}{The current state (as a numeric scalar).}

\item{target}{A function taking numeric scalar and returning a numeric
scalar.}

\item{pseudo_log_pdf}{Not yet documented.}

\item{pseudo_inv_cdf}{Not yet documented.}

\item{log}{If \code{FALSE}, the \code{target} function is the density
function of the target distribution.  If \code{TRUE}, the \code{target}
function evaluates the log of the density of the target distribution.}
}
\value{
A list contains three elements: "x" is the new state, "u" is the
value of the CDF of the psuedo target associated with the returned value,
inverse CDF method, and "nEvaluations is the number of evaluations of the
target function used to obtain the new state.
}
\description{
This function implements the transform slice sampler.  ...More details...
}
\examples{
lf <- function(x) dbeta(x, 3, 4, log=TRUE)
pseudoLogPDF <- function(x) dbeta(x, shape1=1, shape2=1, log=TRUE)
pseudoInvCDF <- function(u) qbeta(u, shape1=1, shape2=1)
draws <- numeric(1000)
nEvaluations <- 0L
seconds <- system.time({
    for ( i in seq.int(2,length(draws)) ) {
        out <- slice_sampler_transform(draws[i-1], target=lf, pseudoLogPDF, pseudoInvCDF)
        draws[i] <- out$x
        nEvaluations <- nEvaluations + out$nEvaluations
    }
})['elapsed']
nEvaluations/length(draws)
nEvaluations/ess(draws)
ess(draws)/seconds
plot(density(draws), xlim=c(0,1))
curve(exp(lf(x)), 0, 1, col="blue", add=TRUE)

}
